# -*- coding: utf-8; mode: sh indent-tabs-mode: nil -*-
# SPDX-License-Identifier: GNU General Public License v3.0 or later
# shellcheck shell=bash

lxc_set_suite_env() {
    export LXC_HOST_PREFIX="${LXC_SUITE_NAME:-dev}"
    export LXC_SUITE=(

        # to disable/enable containers
        # just comment/uncomment lines ..

        # end of standard support see https://wiki.ubuntu.com/Releases
        #"images:ubuntu/16.04"  "ubu1604"    # April 2021
        #"images:ubuntu/18.04"  "ubu1804"    # April 2023
        "images:ubuntu/20.04"  "ubu2004"    # (EOL 2030)

        # EOL see https://fedoraproject.org/wiki/Releases
        "images:fedora/31"     "fedora31"

        # rolling releases see https://www.archlinux.org/releng/releases/
        "images:archlinux"     "archlinux"
    )
}

# ----------------------------------------------------------------------------
# This file is a part of all LXC suites.  It is sourced from different context,
# do not manipulate the environment directly, implement functions and manipulate
# environment only is subshells!
# ----------------------------------------------------------------------------


lxc_suite_install_info() {
    (
        lxc_set_suite_env
        cat <<EOF
LXC suite: ${LXC_SUITE_NAME} -- ${PUBLIC_URL:-...}
suite images:
$(echo "  ${LOCAL_IMAGES[*]}" | $FMT)
suite containers:
$(echo "  ${CONTAINERS[*]}" | $FMT)
EOF
    )
}

lxc_suite_install() {
    (
        lxc_set_suite_env
        FORCE_TIMEOUT=0
        export FORCE_TIMEOUT

        rst_title "install suite '${LXC_SUITE_NAME}' ($(hostname))" part
        echo
        suite_install
        rst_title "suite '${LXC_SUITE_NAME}' installation finished ($(hostname))"
        lxc_suite_info
        echo
    )
}

lxc_suite_uninstall() {
    (
        lxc_set_suite_env
        FORCE_TIMEOUT=0
        export FORCE_TIMEOUT

        rst_title "uninstall suite '${LXC_SUITE_NAME}' ($(hostname))" part
        echo
        suite_uninstall
    )
}

lxc_suite_info() {
    (
        lxc_set_suite_env
        echo
        for ip in $(global_IPs) ; do
            if [[ $ip =~ .*:.* ]]; then
                echo "(${ip%|*}) IPv6:       http://[${ip#*|}]"
            else
                # IPv4:
                # shellcheck disable=SC2034,SC2031
                echo "(${ip%|*}) IPv4:       http://${ip#*|}"
            fi
        done
        echo "to start bash console use::"
        echo "  ./${LXC_SUITE_NAME:-./suite <suite-name>} ${LXC_SUITE_IMAGE:-<image-name>}  bash"
    )
}

assert_user() {
    (
        rst_title "user $SERVICE_USER" section
        echo
        suite_root_shell <<EOF
useradd --shell /bin/bash --system \
 --home-dir "$SERVICE_HOME" \
 --comment 'Privacy-respecting metasearch engine' $SERVICE_USER
mkdir "$SERVICE_HOME"
chown -R "$SERVICE_GROUP:$SERVICE_GROUP" "$SERVICE_HOME"
groups $SERVICE_USER
EOF
        info_msg "to start bash for this user use::"
        info_msg "    sudo -H ./utils/lxc.sh cmd $(hostname) sudo -u $SERVICE_USER -i bash"
    )
}

create_pyenv() {
    (
        rst_title "Create virtualenv (python)" section
        echo
        info_msg "create pyenv in ${SERVICE_PYENV}"
        suite_service_user_shell <<EOF
rm -rf "${SERVICE_PYENV}"
python3 -m venv "${SERVICE_PYENV}"
grep -qFs -- 'source ${SERVICE_PYENV}/bin/activate' ~/.profile \
  || echo 'source ${SERVICE_PYENV}/bin/activate' >> ~/.profile
EOF
        info_msg "inspect python's virtual environment"
        suite_service_user_shell <<EOF
command -v python && python --version
EOF
        wait_key
        info_msg "install needed python packages"
        suite_service_user_shell <<EOF
pip install --upgrade pip
pip install wheel
EOF
    )
}

suite_service_user_shell(){
    # shellcheck disable=SC2154
    tee_stderr 0.1 \
        | sudo -H -u "${SERVICE_USER}" -i 2>&1 \
        |  prefix_stdout "${_Yellow}|${SERVICE_USER}|${_creset} "
}

suite_root_shell(){
    tee_stderr 0.1 \
        | bash 2>&1 \
        | prefix_stdout
}

suite_main_create(){
    (
        [[ -z $1 ]] && echo "ERROR: missing argument: <image-name>" >&2 && exit 42
        container="$LXC_HOST_PREFIX-$1"
        sudo_or_exit
        build_container "$container"
        lxc_exec_cmd "$container" "${LXC_REPO_ROOT}/utils/lxc.sh" __install suite
    )
}

suite_main_drop(){
    (
        [[ -z $1 ]] && echo "ERROR: missing argument: <image-name>" >&2 && exit 42
        container="$LXC_HOST_PREFIX-$1"
        sudo_or_exit
        lxc_delete_container "$container"
    )
}

suite_main_cmd(){
    (
        [[ -z $1 ]] && echo "ERROR: missing argument: <image-name>" >&2 && exit 42
        container="$LXC_HOST_PREFIX-$1"; shift
        sudo_or_exit
        if ! lxc_exists "$container";then
            err_msg "container ** $container ** does not yet exists"
            exit 42
        fi
        lxc_exec_cmd "$container" sudo -u "${SERVICE_USER:-root}" -i bash -c \""$*"\"
    )
}

suite_install() {
    die 42 "[${LXC_SUITE_NAME}] Sorry, suite_install not yet implemented! (can't install)"
}

suite_uninstall() {
    die 42 "[${LXC_SUITE_NAME}] Sorry, suite_uninstall not yet implemented! (can't un-install)"
}
